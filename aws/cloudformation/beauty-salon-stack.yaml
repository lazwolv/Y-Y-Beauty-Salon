AWSTemplateFormatVersion: '2010-09-09'
Description: Beauty Salon Application Stack

Resources:
  GetAppointmentsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: getAppointments
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-deployment-bucket
        S3Key: getAppointments.zip
      Runtime: nodejs14.x

  SendNotificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: sendNotification
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: your-deployment-bucket
        S3Key: sendNotification.zip
      Runtime: nodejs14.x

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SNSPublishPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: sns:Publish
                Resource: '*'
  BeautySalonApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: BeautySalonAPI

  AppointmentsResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt BeautySalonApi.RootResourceId
      PathPart: appointments
      RestApiId: !Ref BeautySalonApi

  BeautySalonApiAuthorizer:
    Type: AWS::ApiGateway::Authorizer
    Properties:
      Name: CognitoAuthorizer
      Type: COGNITO_USER_POOLS
      IdentitySource: method.request.header.Authorization
      RestApiId: !Ref BeautySalonApi
      ProviderARNs:
        - !GetAtt BeautySalonUserPool.Arn

  GetAppointmentsMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      HttpMethod: GET
      ResourceId: !Ref AppointmentsResource
      RestApiId: !Ref BeautySalonApi
      AuthorizationType: COGNITO_USER_POOLS
      AuthorizerId: !Ref BeautySalonApiAuthorizer
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetAppointmentsFunction.Arn}/invocations
  BeautySalonUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: BeautySalonUserPool
      AutoVerifiedAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true

  BeautySalonUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: BeautySalonUserPoolClient
      UserPoolId: !Ref BeautySalonUserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
